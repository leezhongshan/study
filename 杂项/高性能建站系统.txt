高性能建站系统
首先是从三方面来提高的，应用层面，服务器端层面，数据库层面。 
一、应用层面 
1、采用freemaker或者velocity来做页面静态化，提高网站的访问速度。 

二、服务器端 
1、对于一些不经常增删改的数据做缓存，比如memcached，redis，mongodb 
2、对于图片的话，采用fastDFS来做图片的分布式服务器，加快图片的存储与读取。 
3、对于安全方面，采用数据库事务来保证数据的安全性能。 
4、能尽量少的使用锁来处理，因为锁有时候会带来一系列的连锁反应。 
5、做负载均衡，通过nginx+tomcat组合给服务器端分流。 
6、通过队列来做一些数据的信息暂存，来减缓线程对服务器的压力。 
7、采用并发的集合类，例如ConcurrentHashMap，CopyOnWriteArrayList等。 
8、考虑程序的可扩展性和可移植性。 
9、数据的一致性问题，需要考虑java concurrent包 
10、适当的使用一些高效算法。 
11、内存一致性：内存操作（如共享变量的读写）的 happen-before 关系。只有写入操作 happen-before 读取操作时，才保证一个线程写入的结果对另一个线程的读取是可视的。synchronized 和 volatile 构造 happen-before 关系，Thread.start() 和Thread.join() 方法形成 happen-before 关系。 
12、JVM的内存模型以及JVM的垃圾回收机制，一直垃圾回收器的合理使用，新生代和老年代的合理分区。 

三、数据库层面 
1、给数据库字段做索引，能够加快查询速度，不是所有的索引都能够加快查询速度的，前提是对于查询多于增删改的数据。 
2、给数据库表做表分区，能够加速查询的速度。 
3、分库分表，通过分区分表能够加快查询速度。 
4、根据explain命令对于sql语句进行解释执行计划分析。 
5、对表进行分区，分区查询会加快速度的 
6、oracle的话。需要选择合适的选择器，根据实际需要，选择基于成本的选择器，或者基于基于规则的优化器 
7、in和exists，还有not in和not exists的用法区别，以及适用场合 
8、做master-slave，进行读写分离，给数据库通过分流来减小压力。 
9、对于sql语句进行优化.


