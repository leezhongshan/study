**************************** 2013-8-4 **************************** 
1.mondodb 的主从配置 

  mongod --dbpath=. --port 2222 --replSet shopex/127.0.0.1:3333
  
  mongod --dbpath=. --port 3333 --replSet shopex/127.0.0.1:2222
  
  db.runCommand({"relpSetInitiate":{
  
   mongod --dbpath=. --port 4444 --replSet shopex/127.0.0.1:2222
   
2. 使用mongoVUE 客户端工具
   


**************************** 2013-8-3 **************************** 
1. mondodb  的增删改
     默认连接test 
    db.person.insert
    db.person.find 
    db.person.update
    db.person.remove
    
2.    

**************************** 2013-8-1 **************************** 
1. MongoDB单机, 主从, 分布式部署 
  1) 单机部署
        ./mongod.exe --dbpath ~/db/data --port 127.0.0.1:10000 --logpath ~/db/log  
		默认的端口是27017。启动的时候必须有一个data目录，让mongod读写数据。写入数据后，data目录里的文件如图：
  2) 
    参考网站：
　　【１】http://blog.csdn.net/pelick/article/details/8644116  
　　【２】http://www.2cto.com/database/201202/121386.html


    Mongodb分片集群规划及部署 

    　
    一、测试环境
     
    环境centos 5.5 x86_64
     
     
     mongodb分片集群规划如下：
     
    一、在服务器上启用mongos（192.168.3.242），由于测试环境，不做高负载及高可用
     
    二、选取三台做为config server
     
    三、在六台上都启用分片及仲裁三台服务器做一组shard server集群
     
    具体操作如下 ：
     
    1、在192.168.3.243、192.168.3.244、192.168.3.245上启动三个分片集，分别为boy1,boy2,boy3。在boy1集群里192.168.3.243为主存储，192.168.3.244为数据备份，192.168.3.245作为仲裁，在boy2集群里192.168.3.244为主存储，192.168.3.245为数据备份，192.168.3.243作为仲裁，在boy3集群里192.168.3.245为主存储，192.168.3.243为数据备份，192.168.3.244作为仲裁。
     
    2、同理在192.168.3.246、192.168.3.248、192.168.3.249再启动多三个分片集，对数据集进行拆分。
     
     
    mongodb分片集群配置如下：
     
    数据存储到/var/data目录下。
     
    mongos配置（192.168.3.242）--启用config server才启用
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongos  --configdb 192.168.3.243:20000,192.168.3.244:20000,192.168.3.245:20000 --port 30000 --logpath=/var/data/mongos.log --logappend --fork
     
     
     
    shard 配置——（192.168.3.243）
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy1 --logpath=/var/data/boy1.log --port 27017 --shardsvr --replSet boy1 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy2 --logpath=/var/data/boy2.log --port 27018 --shardsvr --replSet boy2 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy3 --logpath=/var/data/boy3.log --port 27019 --shardsvr --replSet boy3 --fork --logappend
     
    config配置（192.168.3.243）
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --configsvr --dbpath=/var/data/config --port 20000 --logpath=/var/data/config.log --logappend --fork
     
    shard 配置——（192.168.3.244）
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy1 --logpath=/var/data/boy1.log --port 27017 --shardsvr --replSet boy1 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy2 --logpath=/var/data/boy2.log --port 27018 --shardsvr --replSet boy2 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy3 --logpath=/var/data/boy3.log --port 27019 --shardsvr --replSet boy3 --fork --logappend
     
    config配置（192.168.3.244)
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --configsvr --dbpath=/var/data/config --port 20000 --logpath=/var/data/config.log --logappend --fork
     
    shard 配置——（192.168.3.245）
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy1 --logpath=/var/data/boy1.log --port 27017 --shardsvr --replSet boy1 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy2 --logpath=/var/data/boy2.log --port 27018 --shardsvr --replSet boy2 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy3 --logpath=/var/data/boy3.log --port 27019 --shardsvr --replSet boy3 --fork --logappend
     
    config配置（192.168.3.245)
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --configsvr --dbpath=/var/data/config --port 20000 --logpath=/var/data/config.log --logappend --fork
     
    shard 配置——（192.168.3.246）
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy4 --logpath=/var/data/boy4.log --port 27017 --shardsvr --replSet boy4 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy5 --logpath=/var/data/boy5.log --port 27018 --shardsvr --replSet boy5 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy6 --logpath=/var/data/boy6.log --port 27019 --shardsvr --replSet boy6 --fork --logappend
     
    shard 配置——（192.168.3.248）
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy4 --logpath=/var/data/boy4.log --port 27017 --shardsvr --replSet boy4 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy5 --logpath=/var/data/boy5.log --port 27018 --shardsvr --replSet boy5 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy6 --logpath=/var/data/boy6.log --port 27019 --shardsvr --replSet boy6 --fork --logappend
     
    shard 配置——（192.168.3.249）
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy4 --logpath=/var/data/boy4.log --port 27017 --shardsvr --replSet boy4 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy5 --logpath=/var/data/boy5.log --port 27018 --shardsvr --replSet boy5 --fork --logappend
     
    /home/mongodb-linux-x86_64-1.8.4/bin/mongod --dbpath=/var/data/boy6 --logpath=/var/data/boy6.log --port 27019 --shardsvr --replSet boy6 --fork --logappend
     
     
     
     
     
    连接192.168.3.243、244、245三台中任意一台的27017、27018、27019进行如下操作
     
    config = {_id:'boy1',members: [{_id: 0, host: '192.168.3.243:27017', priority:1},{_id: 1, host: '192.168.3.244:27017'},{_id: 2, host: '192.168.3.245:27017',arbiterOnly:true}]}
     
    config = {_id:'boy1',members: [{_id: 0, host: '192.168.3.243:27018',arbiterOnly:true},{_id: 1, host: '192.168.3.244:27018', priority:1},{_id: 2, host: '192.168.3.245:27018'}]}
     
    config = {_id:'boy1',members: [{_id: 0, host: '192.168.3.243:27019'},{_id: 1, host: '192.168.3.244:27019',arbiterOnly:true},{_id: 2, host: '192.168.3.245:27019', priority:1}]}
     
     
     
    连接192.168.3.246、248、249三台中任意一台的27017、27018、27019进行如下操作
     
    config = {_id:'boy1',members: [{_id: 0, host: '192.168.3.246:27017', priority:1},{_id: 1, host: '192.168.3.248:27017'},{_id: 2, host: '192.168.3.249:27017',arbiterOnly:true}]}
     
    config = {_id:'boy1',members: [{_id: 0, host: '192.168.3.246:27018',arbiterOnly:true},{_id: 1, host: '192.168.3.248:27018', priority:1},{_id: 2, host: '192.168.3.249:27018'}]}
     
    config = {_id:'boy1',members: [{_id: 0, host: '192.168.3.246:27019'},{_id: 1, host: '192.168.3.248:27019',arbiterOnly:true},{_id: 2, host: '192.168.3.249:27019', priority:1}]}
     
     
     
     
     
    用admin连接mongos（192.168.3.242:30000）路由的操作：添加分片
     
    db.runCommand({addshard:"boy1/192.168.3.243:27017,192.168.3.244:27017"});
     
    db.runCommand({addshard:"boy2/192.168.3.244:27018,192.168.3.245:27018"});
     
    db.runCommand({addshard:"boy3/192.168.3.245:27019,192.168.3.243:27019"});
     
    db.runCommand({addshard:"boy4/192.168.3.246:27017,192.168.3.248:27017"});
     
    db.runCommand({addshard:"boy5/192.168.3.248:27018,192.168.3.249:27018"});
     
    db.runCommand({addshard:"boy6/192.168.3.249:27019,192.168.3.246:27019"});
     

  
**************************** 2013-7-31 **************************** 
1. 	  
	 MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。
	MongoDB 部署：
	 1） 安装MongoDB，添加到path路径下
	 2） 在cmd 运行
	   mongod --dbpath D:\MongoDB\data 
	 3）在浏览器输入：http://localhost:27017/，可以看到如下提示
			You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number
			
2. mongodb  shell
	cmd  里输入mongo 
	 进入 shell 界面
	  db.room.insert({"rooid":2, "roomname":"kele"})
	  

	 

3. shell操作数据库：

 

   1.  超级用户相关：

         1. #进入数据库admin

			use admin

         2. #增加或修改用户密码

          db.addUser('name','pwd')

         3. #查看用户列表

          db.system.users.find()

         4. #用户认证

          db.auth('name','pwd')

         5. #删除用户

          db.removeUser('name')

         6. #查看所有用户

          show users

         7. #查看所有数据库

          show dbs

         8. #查看所有的collection

          show collections

         9. #查看各collection的状态

          db.printCollectionStats()

        10. #查看主从复制状态

          db.printReplicationInfo()

        11. #修复数据库

          db.repairDatabase()

        12. #设置记录profiling，0=off 1=slow 2=all

          db.setProfilingLevel(1)

        13. #查看profiling

          show profile

        14. #拷贝数据库

          db.copyDatabase('mail_addr','mail_addr_tmp')

        15. #删除collection

          db.mail_addr.drop()

        16. #删除当前的数据库

          db.dropDatabase()

       

   2. 增删改

         1. #存储嵌套的对象

			db.foo.save({'name':'ysz','address':{'city':'beijing','post':100096},'phone':[138,139]})

         2. #存储数组对象

			db.user_addr.save({'Uid':'yushunzhi@sohu.com','Al':['test-1@sohu.com','test-2@sohu.com']})

         3. #根据query条件修改，如果不存在则插入，允许修改多条记录

            db.foo.update({'yy':5},{'$set':{'xx':2}},upsert=true,multi=true)

         4. #删除yy=5的记录

            db.foo.remove({'yy':5})

         5. #删除所有的记录

            db.foo.remove()

 

   3. 索引

         1. #增加索引：1(ascending),-1(descending)

         2. db.foo.ensureIndex({firstname: 1, lastname: 1}, {unique: true});

         3. #索引子对象

         4. db.user_addr.ensureIndex({'Al.Em': 1})

         5. #查看索引信息

         6. db.foo.getIndexes()

         7. db.foo.getIndexKeys()

         8. #根据索引名删除索引

         9. db.user_addr.dropIndex('Al.Em_1')

 

   4. 查询

         1. #查找所有

        2. db.foo.find()

        3. #查找一条记录

        4. db.foo.findOne()

        5. #根据条件检索10条记录

        6. db.foo.find({'msg':'Hello 1'}).limit(10)

        7. #sort排序

        8. db.deliver_status.find({'From':'ixigua@sina.com'}).sort({'Dt',-1})

         9. db.deliver_status.find().sort({'Ct':-1}).limit(1)

        10. #count操作

        11. db.user_addr.count()

        12. #distinct操作,查询指定列，去重复

        13. db.foo.distinct('msg')

        14. #”>=”操作

        15. db.foo.find({"timestamp": {"$gte" : 2}})

        16. #子对象的查找

        17. db.foo.find({'address.city':'beijing'})

   5. 管理

         1. #查看collection数据的大小

         2. db.deliver_status.dataSize()

         3. #查看colleciont状态

         4. db.deliver_status.stats()

         5. #查询所有索引的大小

         6. db.deliver_status.totalIndexSize()

 

5.  advanced queries:高级查询


条件操作符 
$gt : > 
$lt : < 
$gte: >= 
$lte: <= 
$ne : !=、<> 
$in : in 
$nin: not in 
$all: all 
$not: 反匹配(1.3.3及以上版本) 

查询 name <> "bruce" and age >= 18 的数据 
db.users.find({name: {$ne: "bruce"}, age: {$gte: 18}}); 

查询 creation_date > '2010-01-01' and creation_date <= '2010-12-31' 的数据 
db.users.find({creation_date:{$gt:new Date(2010,0,1), $lte:new Date(2010,11,31)}); 

查询 age in (20,22,24,26) 的数据 
db.users.find({age: {$in: [20,22,24,26]}}); 

查询 age取模10等于0 的数据 
db.users.find('this.age % 10 == 0'); 
或者 
db.users.find({age : {$mod : [10, 0]}}); 

匹配所有 
db.users.find({favorite_number : {$all : [6, 8]}}); 
可以查询出{name: 'David', age: 26, favorite_number: [ 6, 8, 9 ] } 
可以不查询出{name: 'David', age: 26, favorite_number: [ 6, 7, 9 ] } 

查询不匹配name=B*带头的记录 
db.users.find({name: {$not: /^B.*/}}); 
查询 age取模10不等于0 的数据 
db.users.find({age : {$not: {$mod : [10, 0]}}}); 

#返回部分字段 
选择返回age和_id字段(_id字段总是会被返回) 
db.users.find({}, {age:1}); 
db.users.find({}, {age:3}); 
db.users.find({}, {age:true}); 
db.users.find({ name : "bruce" }, {age:1}); 
0为false, 非0为true 

选择返回age、address和_id字段 
db.users.find({ name : "bruce" }, {age:1, address:1}); 

排除返回age、address和_id字段 
db.users.find({}, {age:0, address:false}); 
db.users.find({ name : "bruce" }, {age:0, address:false}); 

数组元素个数判断 
对于{name: 'David', age: 26, favorite_number: [ 6, 7, 9 ] }记录 
匹配db.users.find({favorite_number: {$size: 3}}); 
不匹配db.users.find({favorite_number: {$size: 2}}); 

$exists判断字段是否存在 
查询所有存在name字段的记录 
db.users.find({name: {$exists: true}}); 
查询所有不存在phone字段的记录 
db.users.find({phone: {$exists: false}}); 

$type判断字段类型 
查询所有name字段是字符类型的 
db.users.find({name: {$type: 2}}); 
查询所有age字段是整型的 
db.users.find({age: {$type: 16}}); 

对于字符字段，可以使用正则表达式 
查询以字母b或者B带头的所有记录 
db.users.find({name: /^b.*/i}); 

$elemMatch(1.3.1及以上版本) 
为数组的字段中匹配其中某个元素 

Javascript查询和$where查询 
查询 age > 18 的记录，以下查询都一样 
db.users.find({age: {$gt: 18}}); 
db.users.find({$where: "this.age > 18"}); 
db.users.find("this.age > 18"); 
f = function() {return this.age > 18} db.users.find(f); 

排序sort() 
以年龄升序asc 
db.users.find().sort({age: 1}); 
以年龄降序desc 
db.users.find().sort({age: -1}); 

限制返回记录数量limit() 
返回5条记录 
db.users.find().limit(5); 
返回3条记录并打印信息 
db.users.find().limit(3).forEach(function(user) {print('my age is ' + user.age)}); 
结果 
my age is 18 
my age is 19 
my age is 20 

限制返回记录的开始点skip() 
从第3条记录开始，返回5条记录(limit 3, 5) 
db.users.find().skip(3).limit(5); 

查询记录条数count() 
db.users.find().count(); 
db.users.find({age:18}).count(); 
以下返回的不是5，而是user表中所有的记录数量 
db.users.find().skip(10).limit(5).count(); 
如果要返回限制之后的记录数量，要使用count(true)或者count(非0) 
db.users.find().skip(10).limit(5).count(true); 

分组group() 
假设test表只有以下一条数据 
{ domain: "www.mongodb.org" 
, invoked_at: {d:"2009-11-03", t:"17:14:05"} 
, response_time: 0.05 
, http_action: "GET /display/DOCS/Aggregation" 
} 
使用group统计test表11月份的数据count:count(*)、total_time:sum(response_time)、avg_time:total_time/count; 
db.test.group( 
{ cond: {"invoked_at.d": {$gt: "2009-11", $lt: "2009-12"}} 
, key: {http_action: true} 
, initial: {count: 0, total_time:0} 
, reduce: function(doc, out){ out.count++; out.total_time+=doc.response_time } 
, finalize: function(out){ out.avg_time = out.total_time / out.count } 
} ); 

[ 
{ 
"http_action" : "GET /display/DOCS/Aggregation", 
"count" : 1, 
"total_time" : 0.05, 
"avg_time" : 0.05 
} 
]